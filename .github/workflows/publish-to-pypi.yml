name: Test and Publish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:  # Enables manual trigger from GitHub UI

jobs:
  test-build-and-publish:
    name: Test, build and publish Python package
    # Only run on merged PRs or direct pushes to main
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install a specific version of setuptools that works across all Python versions
        pip install setuptools==68.0.0
        pip install pytest pytest-cov build twine
        # Ignore deprecation warnings during installation
        pip install . --no-warn-script-location
    
    - name: Run tests
      run: |
        pytest tests/ -v

    # Only build and publish once if tests pass across all Python versions
    - name: Build package
      if: ${{ matrix.python-version == '3.10' }}
      run: python -m build
    
    - name: Check package
      if: ${{ matrix.python-version == '3.10' }}
      run: twine check dist/*
    
    - name: Publish to TestPyPI
      if: ${{ matrix.python-version == '3.10' }}
      id: testpypi
      env:
        PYPI_TEST_API_KEY: ${{ secrets.PYPI_TEST_API_KEY }}
      run: |
        # Get current version from pyproject.toml
        PACKAGE_VERSION=$(grep "version" pyproject.toml | sed -E 's/version = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/g' | tr -d ' "')
        echo "Testing version: $PACKAGE_VERSION"
        
        # Try to install current version from TestPyPI to check if it exists
        if pip install --index-url https://test.pypi.org/simple/ nyan-pytest==$PACKAGE_VERSION &> /dev/null; then
          echo "Package version $PACKAGE_VERSION already exists on TestPyPI, skipping upload"
        else
          echo "Uploading version $PACKAGE_VERSION to TestPyPI..."
          twine upload --repository testpypi dist/* -u __token__ -p $PYPI_TEST_API_KEY --verbose
          echo "Successfully uploaded to TestPyPI"
        fi
    
    - name: Publish to PyPI
      if: ${{ matrix.python-version == '3.10' && success() }}
      env:
        PYPI_API_KEY: ${{ secrets.PYPI_API_KEY }}
      run: |
        # Get current version from pyproject.toml
        PACKAGE_VERSION=$(grep "version" pyproject.toml | sed -E 's/version = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/g' | tr -d ' "')
        echo "Publishing version: $PACKAGE_VERSION"
        
        # Try to install current version from PyPI to check if it exists
        if pip install nyan-pytest==$PACKAGE_VERSION &> /dev/null; then
          echo "Package version $PACKAGE_VERSION already exists on PyPI, skipping upload"
        else
          echo "Uploading version $PACKAGE_VERSION to PyPI..."
          twine upload dist/* -u __token__ -p $PYPI_API_KEY --verbose
          echo "Successfully uploaded to PyPI"
        fi